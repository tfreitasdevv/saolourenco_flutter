// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: _getRequiredEnv('FIREBASE_API_KEY_ANDROID'),
    appId: _getRequiredEnv('FIREBASE_APP_ID_ANDROID'),
    messagingSenderId: _getRequiredEnv('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: _getRequiredEnv('FIREBASE_PROJECT_ID'),
    storageBucket: _getRequiredEnv('FIREBASE_STORAGE_BUCKET'),
  );

  static String _getRequiredEnv(String key) {
    try {
      // Verifica se o dotenv foi inicializado
      if (dotenv.isInitialized && dotenv.env.containsKey(key)) {
        final value = dotenv.env[key];
        if (value != null && value.isNotEmpty) {
          return value;
        }
      }
    } catch (e) {
      // Falha ao acessar dotenv
    }
    
    throw Exception(
      '‚ùå Vari√°vel de ambiente $key n√£o encontrada!\n'
      'üìã Passos para corrigir:\n'
      '1. Copie .env.example para .env\n'
      '2. Configure os valores reais no arquivo .env\n'
      '3. Consulte SECURITY_SETUP.md para instru√ß√µes detalhadas'
    );
  }
}
