import 'package:flutter/foundation.dart';
import 'package:onesignal_flutter/onesignal_flutter.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Servi√ßo respons√°vel por gerenciar as notifica√ß√µes push usando OneSignal
class PushNotificationService {
  static final PushNotificationService _instance = PushNotificationService._internal();
  factory PushNotificationService() => _instance;
  PushNotificationService._internal();

  bool _isInitialized = false;

  /// ID do app OneSignal (configurado via .env)
  String get _appId {
    final envAppId = dotenv.env['ONESIGNAL_APP_ID'];
    
    if (envAppId != null && envAppId.isNotEmpty && envAppId != 'your_onesignal_app_id_here') {
      return envAppId;
    }
    
    throw Exception('ONESIGNAL_APP_ID n√£o encontrado ou inv√°lido no arquivo .env');
  }

  /// Inicializa o OneSignal
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // Obter App ID
      final appId = _appId;
      
      // Configura√ß√£o b√°sica do OneSignal
      OneSignal.Debug.setLogLevel(OSLogLevel.verbose);
      
      // Inicializa com o App ID
      OneSignal.initialize(appId);

      // Aguarda um pouco para garantir inicializa√ß√£o
      await Future.delayed(const Duration(milliseconds: 500));

      // Configura os handlers de eventos
      _setupNotificationHandlers();

      // Solicita permiss√£o para notifica√ß√µes
      await _requestPermission();

      _isInitialized = true;
    } catch (e) {
      debugPrint('‚ùå Erro ao inicializar OneSignal: $e');
    }
  }

  /// Configura os handlers para diferentes eventos de notifica√ß√£o
  void _setupNotificationHandlers() {
    // Handler para quando a notifica√ß√£o √© recebida em foreground
    OneSignal.Notifications.addForegroundWillDisplayListener((event) {
      debugPrint('üì± Notifica√ß√£o recebida em foreground: ${event.notification.title}');
      
      // Voc√™ pode customizar o comportamento aqui
      // Por exemplo, mostrar uma dialog personalizada
      event.preventDefault();
      event.notification.display();
    });

    // Handler para quando a notifica√ß√£o √© clicada
    OneSignal.Notifications.addClickListener((event) {
      debugPrint('üëÜ Notifica√ß√£o clicada: ${event.notification.title}');
      
      // Navegar para uma tela espec√≠fica baseada nos dados da notifica√ß√£o
      _handleNotificationClick(event.notification);
    });

    // Handler para mudan√ßas no estado da permiss√£o
    OneSignal.Notifications.addPermissionObserver((state) {
      debugPrint('üîî Estado da permiss√£o alterado: ${state.toString()}');
    });
  }

  /// Solicita permiss√£o para enviar notifica√ß√µes
  Future<bool> _requestPermission() async {
    try {
      final permission = await OneSignal.Notifications.requestPermission(true);
      return permission;
    } catch (e) {
      debugPrint('‚ùå Erro ao solicitar permiss√£o: $e');
      return false;
    }
  }

  /// Obt√©m o Player ID do usu√°rio (usado para envios direcionados)
  Future<String?> getPlayerId() async {
    try {
      final userId = OneSignal.User.pushSubscription.id;
      return userId;
    } catch (e) {
      debugPrint('‚ùå Erro ao obter Player ID: $e');
      return null;
    }
  }

  /// Define tags do usu√°rio para segmenta√ß√£o
  Future<void> setUserTags(Map<String, String> tags) async {
    try {
      OneSignal.User.addTags(tags);
      debugPrint('üè∑Ô∏è Tags do usu√°rio definidas: $tags');
    } catch (e) {
      debugPrint('‚ùå Erro ao definir tags: $e');
    }
  }

  /// Define o email do usu√°rio (para campanhas de email)
  Future<void> setEmail(String email) async {
    try {
      OneSignal.User.addEmail(email);
      debugPrint('üìß Email do usu√°rio definido: $email');
    } catch (e) {
      debugPrint('‚ùå Erro ao definir email: $e');
    }
  }

  /// Remove o email do usu√°rio
  Future<void> removeEmail(String email) async {
    try {
      OneSignal.User.removeEmail(email);
      debugPrint('üìß Email removido: $email');
    } catch (e) {
      debugPrint('‚ùå Erro ao remover email: $e');
    }
  }

  /// Envia eventos customizados para an√°lise
  Future<void> sendEvent(String eventName, Map<String, dynamic> properties) async {
    try {
      OneSignal.Session.addOutcome(eventName);
      debugPrint('üìä Evento enviado: $eventName com propriedades: $properties');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar evento: $e');
    }
  }

  /// Trata o clique em notifica√ß√µes
  void _handleNotificationClick(OSNotification notification) {
    // Extrair dados customizados da notifica√ß√£o
    final additionalData = notification.additionalData;
    
    if (additionalData != null) {
      // Exemplo de navega√ß√£o baseada nos dados
      final screenToOpen = additionalData['screen'];
      final itemId = additionalData['item_id'];
      
      debugPrint('üì± Dados da notifica√ß√£o - Tela: $screenToOpen, ID: $itemId');
      
      // Aqui voc√™ pode implementar a navega√ß√£o usando o Modular
      // Modular.to.pushNamed('/screen/$screenToOpen', arguments: itemId);
    }
  }

  /// Obt√©m o status da permiss√£o atual
  Future<bool> hasPermission() async {
    try {
      return OneSignal.Notifications.permission;
    } catch (e) {
      debugPrint('‚ùå Erro ao verificar permiss√£o: $e');
      return false;
    }
  }

  /// Abre as configura√ß√µes do app para o usu√°rio habilitar notifica√ß√µes manualmente
  Future<void> openNotificationSettings() async {
    try {
      // No OneSignal v5, isso pode ser feito atrav√©s das configura√ß√µes do sistema
      debugPrint('üîß Redirecionando para configura√ß√µes de notifica√ß√£o');
    } catch (e) {
      debugPrint('‚ùå Erro ao abrir configura√ß√µes: $e');
    }
  }

  /// Limpa todas as notifica√ß√µes exibidas
  Future<void> clearAllNotifications() async {
    try {
      OneSignal.Notifications.clearAll();
      debugPrint('üßπ Todas as notifica√ß√µes foram limpas');
    } catch (e) {
      debugPrint('‚ùå Erro ao limpar notifica√ß√µes: $e');
    }
  }
}
